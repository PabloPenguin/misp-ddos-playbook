#!/usr/bin/env python3
"""
ddos_playbook_cli.py

Interactive MISP DDoS playbook helper (canonical galaxy tag behavior).

This variant uses the canonical misp-galaxy tag string for ATT&CK T1498
that worked in your troubleshooting test:

    misp-galaxy:mitre-attack-pattern="Network Denial of Service - T1498"

It avoids trying to call /events/addGalaxy (not present on your 2.5.21),
and reliably uses /events/addTag (the endpoint that succeeded).

Features:
 - Enforces playbook default tags (TLP, incident-type=ddos, event-type=incident, workflow:state=new)
 - Adds narrative as a comment attribute (required)
 - Adds attacker/victim IPs and amplification hosts
 - Adds canonical misp-galaxy tag for ATT&CK T1498
 - --replace-existing: delete attributes before adding new ones
 - --show-default-tags: print enforced defaults and exit
"""

import os
import sys
import argparse
import json
import requests
from dotenv import load_dotenv

# Try PyMISP but remain tolerant if unavailable
try:
    from pymisp import PyMISP, MISPEvent
    HAVE_PYMISP = True
except Exception:
    HAVE_PYMISP = False

# ----------------------------
# Load .env
# ----------------------------
load_dotenv()
MISP_URL = os.getenv("MISP_URL")
MISP_KEY = os.getenv("MISP_KEY")
MISP_VERIFY_SSL = os.getenv("MISP_VERIFY_SSL", "false").lower() in ("1", "true", "yes")

if not MISP_URL or not MISP_KEY:
    print("ERROR: please set MISP_URL and MISP_KEY in your .env file")
    sys.exit(2)

if not (MISP_URL.startswith("http://") or MISP_URL.startswith("https://")):
    print("ERROR: MISP_URL must include scheme (http:// or https://)")
    sys.exit(2)

HEADERS = {
    "Authorization": MISP_KEY,
    "Accept": "application/json",
    "Content-Type": "application/json"
}

# ----------------------------
# Playbook-enforced tags
# ----------------------------
ENFORCED_TAGS = [
    "tlp:green",
    'information-security-indicators:incident-type="ddos"',
    "misp-event-type:incident",
    'workflow:state="new"'
]

# Canonical MISP galaxy tag for T1498 (use this exact string)
CANONICAL_T1498_TAG = 'misp-galaxy:mitre-attack-pattern="Network Denial of Service - T1498"'

# ----------------------------
# Helpers
# ----------------------------
def init_pymisp():
    if HAVE_PYMISP:
        try:
            return PyMISP(MISP_URL, MISP_KEY, MISP_VERIFY_SSL, debug=False)
        except TypeError:
            # Some PyMISP versions have slightly different signatures
            return PyMISP(MISP_URL, MISP_KEY, MISP_VERIFY_SSL)
    return None

def create_event(misp, info):
    """
    Create a new event. Prefer PyMISP.add_event; fall back to raw POST /events/add.
    Returns event id (int) or None.
    """
    if misp:
        try:
            e = MISPEvent()
            e.info = info
            e.distribution = 0
            e.threat_level_id = 4
            e.analysis = 0
            e.published = False
            ev = misp.add_event(e, pythonify=True)
            if hasattr(ev, "id"):
                return int(ev.id)
            if isinstance(ev, dict):
                eid = (ev.get("Event") or {}).get("id") or ev.get("id")
                if eid:
                    return int(eid)
        except Exception as e:
            print("PyMISP.add_event failed, falling back to raw API:", e)

    payload = {"Event": {"info": info, "distribution": 0, "threat_level_id": 4, "analysis": 0, "published": False}}
    try:
        r = requests.post(f"{MISP_URL.rstrip('/')}/events/add", headers=HEADERS, json=payload, verify=MISP_VERIFY_SSL, timeout=30)
        if r.status_code in (200, 201):
            data = r.json()
            eid = None
            if isinstance(data, dict):
                eid = (data.get("Event") or {}).get("id") or data.get("id")
            if eid:
                return int(eid)
        else:
            print("Failed to create event (raw API):", r.status_code, r.text)
    except Exception as e:
        print("Exception calling events/add:", e)
    return None

def add_tag(event_id, tag):
    """
    Add a tag to an event (tries events/addTag/{id} then /events/addTag).
    Returns True/False.
    """
    try:
        url = f"{MISP_URL.rstrip('/')}/events/addTag/{event_id}"
        r = requests.post(url, headers=HEADERS, json={"tag": tag}, verify=MISP_VERIFY_SSL, timeout=15)
        if r.status_code in (200, 201):
            return True
        # Fallback: /events/addTag with id + tag_name
        url2 = f"{MISP_URL.rstrip('/')}/events/addTag"
        r2 = requests.post(url2, headers=HEADERS, json={"id": int(event_id), "tag_name": tag}, verify=MISP_VERIFY_SSL, timeout=15)
        return r2.status_code in (200, 201)
    except Exception as e:
        print("Exception while adding tag:", e)
        return False

def add_attribute(event_id, attr_type, value, category="Other", to_ids=False, misp=None):
    """
    Add an attribute to an event. Tries PyMISP then raw /attributes/add.
    Returns True on success.
    """
    payload = {"event_id": int(event_id), "type": attr_type, "value": value, "category": category, "to_ids": to_ids}
    if misp:
        try:
            misp.add_attribute(event_id, payload)
            return True
        except Exception as e:
            # fallback to raw call
            print("PyMISP.add_attribute fallback:", e)

    try:
        r = requests.post(f"{MISP_URL.rstrip('/')}/attributes/add", headers=HEADERS, json=payload, verify=MISP_VERIFY_SSL, timeout=15)
    except Exception as e:
        print("Exception calling attributes/add:", e)
        return False

    try:
        data = r.json()
        if isinstance(data, dict) and not data.get("saved", True):
            print("Attribute add failed:", data)
            return False
    except Exception:
        pass

    return r.status_code in (200, 201)

def delete_all_attributes(event_id):
    """
    Delete all attributes of an event (used with --replace-existing).
    """
    try:
        r = requests.get(f"{MISP_URL.rstrip('/')}/attributes/index/{event_id}", headers=HEADERS, verify=MISP_VERIFY_SSL, timeout=30)
    except Exception as e:
        print("Exception listing attributes:", e)
        return False
    if r.status_code != 200:
        print("Could not fetch attributes to delete:", r.status_code, r.text)
        return False
    try:
        attrs = r.json()
    except Exception as e:
        print("Failed to parse attributes list:", e)
        return False

    if isinstance(attrs, dict):
        for k in ("Attribute", "attributes", "response"):
            if k in attrs and isinstance(attrs[k], list):
                attrs = attrs[k]
                break

    deleted = 0
    for a in attrs:
        aid = None
        if isinstance(a, dict):
            aid = a.get("id") or (a.get("Attribute") or {}).get("id")
        if not aid:
            continue
        try:
            dr = requests.post(f"{MISP_URL.rstrip('/')}/attributes/delete/{aid}", headers=HEADERS, verify=MISP_VERIFY_SSL, timeout=15)
            if dr.status_code in (200, 201):
                deleted += 1
            else:
                print(f"Failed deleting attribute {aid}: {dr.status_code}")
        except Exception as e:
            print("Exception deleting attribute:", e)
    print(f"Deleted {deleted} attributes.")
    return True

def add_canonical_t1498_tag(event_id):
    """
    Add the canonical misp-galaxy tag string that your server recognizes.
    """
    ok = add_tag(event_id, CANONICAL_T1498_TAG)
    if ok:
        print("Added canonical galaxy tag:", CANONICAL_T1498_TAG)
    else:
        print("Warning: failed to add canonical galaxy tag; attempting fallback tag.")
        # fallback to a plain mitre-attack-pattern tag (less ideal but still useful)
        fallback = 'mitre-attack-pattern:Network Denial of Service - T1498'
        add_tag(event_id, fallback)
        print("Added fallback tag:", fallback)

# ----------------------------
# Interactive flow
# ----------------------------
def interactive_flow(args):
    misp = init_pymisp()

    choice = input("Create new event or update existing? (new/existing) [new]: ").strip().lower() or "new"
    if choice == "new":
        info = input("Event Title / Info: ").strip()
        if not info:
            print("Event info required; aborting.")
            return
        eid = create_event(misp, info)
        if not eid:
            print("Failed to create event; aborting.")
            return
        print("Created event id:", eid)
    else:
        id_input = input("Enter existing Event ID or UUID: ").strip()
        if not id_input:
            print("No Event ID entered; aborting.")
            return
        if id_input.isdigit():
            eid = int(id_input)
        else:
            try:
                r = requests.get(f"{MISP_URL.rstrip('/')}/events/view/{id_input}", headers=HEADERS, verify=MISP_VERIFY_SSL, timeout=15)
                if r.status_code == 200:
                    d = r.json()
                    eid = int((d.get("Event") or {}).get("id") or d.get("id"))
                else:
                    print("Could not resolve UUID:", r.status_code, r.text)
                    return
            except Exception as e:
                print("Exception resolving UUID:", e)
                return
        print("Working on event:", eid)
        if args.replace_existing:
            confirm = input("âš  Replace existing attributes? This will DELETE all old attributes. (y/N): ").strip().lower()
            if confirm == "y":
                delete_all_attributes(eid)

    if args.show_default_tags:
        print("Enforced playbook tags:")
        for t in ENFORCED_TAGS:
            print(" -", t)
        print("Canonical ATT&CK T1498 galaxy tag (applied):")
        print(" -", CANONICAL_T1498_TAG)
        return

    print("Applying enforced tags:", ENFORCED_TAGS)
    for t in ENFORCED_TAGS:
        ok = add_tag(eid, t)
        if not ok:
            print("Warning: failed to add enforced tag:", t)
    print("Applied enforced tags (best-effort).")

    narrative = input("Enter a narrative/description for the annotation (required): ").strip()
    if not narrative:
        print("Narrative is required; aborting.")
        return
    ok = add_attribute(eid, "comment", narrative, category="Other", to_ids=False, misp=misp)
    if ok:
        print("Annotation (comment) added.")
    else:
        print("Warning: failed to add annotation.")

    atk = input("Comma-separated attacker IPs (blank to skip): ").strip()
    if atk:
        for ip in [x.strip() for x in atk.split(",") if x.strip()]:
            ok = add_attribute(eid, "ip-src", ip, category="Network activity", to_ids=False, misp=misp)
            print(f"Added attacker IP {ip}: {ok}")

    vic = input("Comma-separated victim IPs/ranges (blank to skip): ").strip()
    if vic:
        for ip in [x.strip() for x in vic.split(",") if x.strip()]:
            ok = add_attribute(eid, "ip-dst", ip, category="Network activity", to_ids=False, misp=misp)
            print(f"Added victim IP {ip}: {ok}")

    amp = input("Comma-separated amplification sources (domains/open resolvers) (blank to skip): ").strip()
    if amp:
        for host in [x.strip() for x in amp.split(",") if x.strip()]:
            ok = add_attribute(eid, "hostname", host, category="Network activity", to_ids=False, misp=misp)
            print(f"Added amplification host {host}: {ok}")

    # Add canonical misp-galaxy tag for T1498 (matches what we tested)
    add_canonical_t1498_tag(eid)

    print("\nDone. Event id:", eid)
    print("Note: This run enforced the simplified DDoS playbook (TLP, incident-type, event-type, annotation).")

# ----------------------------
# CLI
# ----------------------------
def main():
    parser = argparse.ArgumentParser(description="MISP DDoS Playbook CLI (canonical galaxy tag)")
    parser.add_argument("--replace-existing", action="store_true", help="Delete old attributes when updating an event")
    parser.add_argument("--show-default-tags", action="store_true", help="Print playbook default tags and exit")
    args = parser.parse_args()
    try:
        interactive_flow(args)
    except KeyboardInterrupt:
        print("\nCancelled.")
    except Exception as e:
        print("Unhandled error:", e)
        raise

if __name__ == "__main__":
    main()
